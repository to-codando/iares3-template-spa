{
  "version": 3,
  "sources": ["../../../../../src/frontend/ui/elements/TimerApp/index.ts"],
  "sourcesContent": ["import type {\n  GenericObject,\n  HTMX,\n  State,\n  StateManager,\n  TaggedStyle,\n  TaggedTemplate,\n} from \"iares\";\n\ntype Props = {\n  handler: <T = unknown>(params: T) => void;\n};\n\ntype Styles = { TimerApp: string; label: string };\n\ntype StyleHandler = () => GenericObject;\n\ntype Actions = {\n  increment: () => void;\n};\n\ntype Injections = GenericObject<{\n  actions: Actions;\n  styles: Styles;\n}>;\n\ntype TemplateInjections = () => Injections;\n\ntype TemplateHandler = (\n  params: TemplateParams,\n  injections: TemplateInjections,\n) => TaggedTemplate;\n\ntype Model = GenericObject<{\n  timeLeft: number;\n}>;\n\ntype UseState = <T = Model>(initialState: T) => StateManager<T>;\n\ntype UseStyle = (styleHandler: StyleHandler) => string;\n\ntype UseTemplate = (\n  templateHandler: TemplateHandler,\n  templateinjections?: TemplateInjections,\n) => TaggedTemplate;\n\ntype TemplateParams = {\n  state: State<Model>;\n  styles: Styles;\n  html: HTMX;\n};\n\ntype StyleParams = {\n  css: TaggedStyle;\n};\n\ntype Params = {\n  props: Props;\n  useState: UseState;\n  useStyle: UseStyle;\n  useTemplate: UseTemplate;\n};\n\ntype Timer = ReturnType<typeof setTimeout>;\n\ntype TimerHandlerParams = {\n  state: StateManager<Model>;\n  seconds: number;\n};\n\ntype StateWatcherHandlerParams = {\n  oneSecond: number;\n  timer: Timer;\n};\n\nconst template = (params: TemplateParams): TaggedTemplate => {\n  const { state, styles, html } = params;\n  const timeLeft = Number(state.timeLeft);\n\n  return html`\n\n    <div class=\"timer\"> \n      <span>A simple counter</span>\n      <span>${timeLeft <= 9 && \"0\"}${timeLeft || \"0\"}s</span>\n    </div>\n    ` as TaggedTemplate;\n};\n\nconst createStateHandler = (params: TimerHandlerParams) => {\n  const { state, seconds } = params;\n  return () => {\n    const { timeLeft } = state.get();\n    if (!timeLeft) return;\n    state.set({ timeLeft: timeLeft - seconds });\n  };\n};\n\nconst createStateWatcher =\n  ({ oneSecond, timer }: StateWatcherHandlerParams) =>\n    ({ timeLeft }: Model) => {\n      if (timeLeft < oneSecond) {\n        clearTimeout(timer);\n      }\n    };\n\nexport const TimerApp = ({ useState, useStyle, useTemplate }: Params) => {\n  const state = useState<Model>({ timeLeft: 120 });\n  useStyle(createStyles);\n\n  const oneSecond = 1;\n  const cycleTime = 1000;\n\n  const stateHandler = createStateHandler({ state, seconds: oneSecond });\n  const timer = setTimeout(stateHandler, cycleTime);\n\n  const stateWatcher = createStateWatcher({ oneSecond, timer });\n  state.watch(stateWatcher);\n\n  return useTemplate(template);\n};\n\nconst createStyles = () => ({\n  TimerApp: ({ css }: StyleParams) => css`\n      display:flex;\n      width:100%;\n      justify-content:center;\n\n    .timer {\n      background:#b9c5ec;\n      padding:15px;\n      border-radius:8px;\n    }\n\n    .timer span { \n      color: #2072ba; \n      font-size: 1em; \n    }\n\n    .timer span + span {\n        font-weight:bold;\n        font-size: 2em\n      }\n\n    .timer span:first-of-type {\n        margin-bottom:1em\n      }\n   \n`,\n});\n"],
  "mappings": ";;;;AA2EA,IAAM,WAAW,wBAAC,WAA2C;AAC3D,QAAM,EAAE,OAAO,QAAQ,KAAK,IAAI;AAChC,QAAM,WAAW,OAAO,MAAM,QAAQ;AAEtC,SAAO;AAAA;AAAA;AAAA;AAAA,cAIK,YAAY,KAAK,GAAG,GAAG,YAAY,GAAG;AAAA;AAAA;AAGpD,GAXiB;AAajB,IAAM,qBAAqB,wBAAC,WAA+B;AACzD,QAAM,EAAE,OAAO,QAAQ,IAAI;AAC3B,SAAO,MAAM;AACX,UAAM,EAAE,SAAS,IAAI,MAAM,IAAI;AAC/B,QAAI,CAAC,SAAU;AACf,UAAM,IAAI,EAAE,UAAU,WAAW,QAAQ,CAAC;AAAA,EAC5C;AACF,GAP2B;AAS3B,IAAM,qBACJ,wBAAC,EAAE,WAAW,MAAM,MAClB,CAAC,EAAE,SAAS,MAAa;AACvB,MAAI,WAAW,WAAW;AACxB,iBAAa,KAAK;AAAA,EACpB;AACF,GALF;AAOK,IAAM,WAAW,wBAAC,EAAE,UAAU,UAAU,YAAY,MAAc;AACvE,QAAM,QAAQ,SAAgB,EAAE,UAAU,IAAI,CAAC;AAC/C,WAAS,YAAY;AAErB,QAAM,YAAY;AAClB,QAAM,YAAY;AAElB,QAAM,eAAe,mBAAmB,EAAE,OAAO,SAAS,UAAU,CAAC;AACrE,QAAM,QAAQ,WAAW,cAAc,SAAS;AAEhD,QAAM,eAAe,mBAAmB,EAAE,WAAW,MAAM,CAAC;AAC5D,QAAM,MAAM,YAAY;AAExB,SAAO,YAAY,QAAQ;AAC7B,GAdwB;AAgBxB,IAAM,eAAe,8BAAO;AAAA,EAC1B,UAAU,wBAAC,EAAE,IAAI,MAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;AA0BZ,IA3BqB;",
  "names": []
}
