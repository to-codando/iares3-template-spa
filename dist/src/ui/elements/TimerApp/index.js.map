{
  "version": 3,
  "sources": ["../../../../../src/frontend/ui/elements/TimerApp/index.ts"],
  "sourcesContent": ["import type {\n\tGenericObject,\n\tHTMX,\n\tState,\n\tStateManager,\n\tTaggedStyle,\n\tTaggedTemplate,\n} from \"iares\";\n\ntype Props = {\n\thandler: <T = unknown>(params: T) => void;\n};\n\ntype Styles = { TimerApp: string; label: string };\n\ntype StyleHandler = () => GenericObject;\n\ntype Actions = {\n\tincrement: () => void;\n};\n\ntype Injections = GenericObject<{\n\tactions: Actions;\n\tstyles: Styles;\n}>;\n\ntype TemplateInjections = () => Injections;\n\ntype TemplateHandler = (\n\tparams: TemplateParams,\n\tinjections: TemplateInjections,\n) => TaggedTemplate;\n\ntype Model = GenericObject<{\n\ttimeLeft: number;\n}>;\n\ntype UseState = <T = Model>(initialState: T) => StateManager<T>;\n\ntype UseStyle = (styleHandler: StyleHandler) => string;\n\ntype UseTemplate = (\n\ttemplateHandler: TemplateHandler,\n\ttemplateinjections?: TemplateInjections,\n) => TaggedTemplate;\n\ntype TemplateParams = {\n\tstate: State<Model>;\n\tstyles: Styles;\n\thtml: HTMX;\n};\n\ntype StyleParams = {\n\tcss: TaggedStyle;\n};\n\ntype Params = {\n\tprops: Props;\n\tuseState: UseState;\n\tuseStyle: UseStyle;\n\tuseTemplate: UseTemplate;\n};\n\ntype Timer = ReturnType<typeof setTimeout>;\n\ntype TimerHandlerParams = {\n\tstate: StateManager<Model>;\n\tseconds: number;\n};\n\ntype StateWatcherHandlerParams = {\n\toneSecond: number;\n\ttimer: Timer;\n};\n\nconst template = (params: TemplateParams): TaggedTemplate => {\n\tconst { state, styles, html } = params;\n\tconst timeLeft = Number(state.timeLeft);\n\n\treturn html`\n\n    <div class=\"timer\"> \n      <span>A simple counter</span>\n      <span>${timeLeft <= 9 && \"0\"}${timeLeft || \"0\"}s</span>\n    </div>\n    ` as TaggedTemplate;\n};\n\nconst createStateHandler = (params: TimerHandlerParams) => {\n\tconst { state, seconds } = params;\n\treturn () => {\n\t\tconst { timeLeft } = state.get();\n\t\tif (!timeLeft) return;\n\t\tstate.set({ timeLeft: timeLeft - seconds });\n\t};\n};\n\nconst createStateWatcher =\n\t({ oneSecond, timer }: StateWatcherHandlerParams) =>\n\t({ timeLeft }: Model) => {\n\t\tif (timeLeft < oneSecond) {\n\t\t\tclearTimeout(timer);\n\t\t}\n\t};\n\nexport const TimerApp = ({ useState, useStyle, useTemplate }: Params) => {\n\tconst state = useState<Model>({ timeLeft: 120 });\n\tuseStyle(createStyles);\n\n\tconst oneSecond = 1;\n\tconst cycleTime = 1000;\n\n\tconst stateHandler = createStateHandler({ state, seconds: oneSecond });\n\tconst timer = setTimeout(stateHandler, cycleTime);\n\n\tconst stateWatcher = createStateWatcher({ oneSecond, timer });\n\tstate.watch(stateWatcher);\n\n\treturn useTemplate(template);\n};\n\nconst createStyles = () => ({\n\tTimerApp: ({ css }: StyleParams) => css`\n      display:flex;\n      width:100%;\n      justify-content:center;\n\n    .timer {\n      background:#b9c5ec;\n      padding:15px;\n      border-radius:8px;\n    }\n\n    .timer span { \n      color: #2072ba; \n      font-size: 1em; \n    }\n\n    .timer span + span {\n        font-weight:bold;\n        font-size: 2em\n      }\n\n    .timer span:first-of-type {\n        margin-bottom:1em\n      }\n   \n`,\n});\n"],
  "mappings": ";;;;AA2EA,IAAM,WAAW,wBAAC,WAA2C;AAC5D,QAAM,EAAE,OAAO,QAAQ,KAAK,IAAI;AAChC,QAAM,WAAW,OAAO,MAAM,QAAQ;AAEtC,SAAO;AAAA;AAAA;AAAA;AAAA,cAIM,YAAY,KAAK,GAAG,GAAG,YAAY,GAAG;AAAA;AAAA;AAGpD,GAXiB;AAajB,IAAM,qBAAqB,wBAAC,WAA+B;AAC1D,QAAM,EAAE,OAAO,QAAQ,IAAI;AAC3B,SAAO,MAAM;AACZ,UAAM,EAAE,SAAS,IAAI,MAAM,IAAI;AAC/B,QAAI,CAAC,SAAU;AACf,UAAM,IAAI,EAAE,UAAU,WAAW,QAAQ,CAAC;AAAA,EAC3C;AACD,GAP2B;AAS3B,IAAM,qBACL,wBAAC,EAAE,WAAW,MAAM,MACpB,CAAC,EAAE,SAAS,MAAa;AACxB,MAAI,WAAW,WAAW;AACzB,iBAAa,KAAK;AAAA,EACnB;AACD,GALA;AAOM,IAAM,WAAW,wBAAC,EAAE,UAAU,UAAU,YAAY,MAAc;AACxE,QAAM,QAAQ,SAAgB,EAAE,UAAU,IAAI,CAAC;AAC/C,WAAS,YAAY;AAErB,QAAM,YAAY;AAClB,QAAM,YAAY;AAElB,QAAM,eAAe,mBAAmB,EAAE,OAAO,SAAS,UAAU,CAAC;AACrE,QAAM,QAAQ,WAAW,cAAc,SAAS;AAEhD,QAAM,eAAe,mBAAmB,EAAE,WAAW,MAAM,CAAC;AAC5D,QAAM,MAAM,YAAY;AAExB,SAAO,YAAY,QAAQ;AAC5B,GAdwB;AAgBxB,IAAM,eAAe,8BAAO;AAAA,EAC3B,UAAU,wBAAC,EAAE,IAAI,MAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;AA0BX,IA3BqB;",
  "names": []
}
